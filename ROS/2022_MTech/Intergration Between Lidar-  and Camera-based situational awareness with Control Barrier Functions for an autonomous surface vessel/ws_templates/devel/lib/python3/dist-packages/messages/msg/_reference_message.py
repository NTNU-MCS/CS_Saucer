# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from messages/reference_message.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class reference_message(genpy.Message):
  _md5sum = "02538cc248bfc219710e188e6f1af3e2"
  _type = "messages/reference_message"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[] eta_d
float64[] eta_ds
float64[] eta_ds2
float64 w
float64 v_s
float64 v_ss"""
  __slots__ = ['eta_d','eta_ds','eta_ds2','w','v_s','v_ss']
  _slot_types = ['float64[]','float64[]','float64[]','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       eta_d,eta_ds,eta_ds2,w,v_s,v_ss

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(reference_message, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.eta_d is None:
        self.eta_d = []
      if self.eta_ds is None:
        self.eta_ds = []
      if self.eta_ds2 is None:
        self.eta_ds2 = []
      if self.w is None:
        self.w = 0.
      if self.v_s is None:
        self.v_s = 0.
      if self.v_ss is None:
        self.v_ss = 0.
    else:
      self.eta_d = []
      self.eta_ds = []
      self.eta_ds2 = []
      self.w = 0.
      self.v_s = 0.
      self.v_ss = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.eta_d)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.eta_d))
      length = len(self.eta_ds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.eta_ds))
      length = len(self.eta_ds2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.eta_ds2))
      _x = self
      buff.write(_get_struct_3d().pack(_x.w, _x.v_s, _x.v_ss))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eta_d = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eta_ds = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eta_ds2 = s.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.w, _x.v_s, _x.v_ss,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.eta_d)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.eta_d.tostring())
      length = len(self.eta_ds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.eta_ds.tostring())
      length = len(self.eta_ds2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.eta_ds2.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.w, _x.v_s, _x.v_ss))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eta_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eta_ds = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eta_ds2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 24
      (_x.w, _x.v_s, _x.v_ss,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
