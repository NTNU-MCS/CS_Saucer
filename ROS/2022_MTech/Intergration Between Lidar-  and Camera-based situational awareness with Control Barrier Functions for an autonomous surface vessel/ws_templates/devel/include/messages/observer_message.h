// Generated by gencpp from file messages/observer_message.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_OBSERVER_MESSAGE_H
#define MESSAGES_MESSAGE_OBSERVER_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messages
{
template <class ContainerAllocator>
struct observer_message_
{
  typedef observer_message_<ContainerAllocator> Type;

  observer_message_()
    : eta()
    , nu()
    , bias()  {
    }
  observer_message_(const ContainerAllocator& _alloc)
    : eta(_alloc)
    , nu(_alloc)
    , bias(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _eta_type;
  _eta_type eta;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _nu_type;
  _nu_type nu;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _bias_type;
  _bias_type bias;





  typedef boost::shared_ptr< ::messages::observer_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::observer_message_<ContainerAllocator> const> ConstPtr;

}; // struct observer_message_

typedef ::messages::observer_message_<std::allocator<void> > observer_message;

typedef boost::shared_ptr< ::messages::observer_message > observer_messagePtr;
typedef boost::shared_ptr< ::messages::observer_message const> observer_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::observer_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::observer_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages::observer_message_<ContainerAllocator1> & lhs, const ::messages::observer_message_<ContainerAllocator2> & rhs)
{
  return lhs.eta == rhs.eta &&
    lhs.nu == rhs.nu &&
    lhs.bias == rhs.bias;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages::observer_message_<ContainerAllocator1> & lhs, const ::messages::observer_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::messages::observer_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::observer_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::observer_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::observer_message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::observer_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::observer_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::observer_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f3202088d21e8801c58a7a4f2fe213a";
  }

  static const char* value(const ::messages::observer_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f3202088d21e880ULL;
  static const uint64_t static_value2 = 0x1c58a7a4f2fe213aULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::observer_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/observer_message";
  }

  static const char* value(const ::messages::observer_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::observer_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] eta\n"
"float64[] nu\n"
"float64[] bias\n"
;
  }

  static const char* value(const ::messages::observer_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::observer_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eta);
      stream.next(m.nu);
      stream.next(m.bias);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct observer_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::observer_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::observer_message_<ContainerAllocator>& v)
  {
    s << indent << "eta[]" << std::endl;
    for (size_t i = 0; i < v.eta.size(); ++i)
    {
      s << indent << "  eta[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eta[i]);
    }
    s << indent << "nu[]" << std::endl;
    for (size_t i = 0; i < v.nu.size(); ++i)
    {
      s << indent << "  nu[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.nu[i]);
    }
    s << indent << "bias[]" << std::endl;
    for (size_t i = 0; i < v.bias.size(); ++i)
    {
      s << indent << "  bias[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bias[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_OBSERVER_MESSAGE_H
