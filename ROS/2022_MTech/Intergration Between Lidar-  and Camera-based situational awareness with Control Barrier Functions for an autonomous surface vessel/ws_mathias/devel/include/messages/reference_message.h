// Generated by gencpp from file messages/reference_message.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_REFERENCE_MESSAGE_H
#define MESSAGES_MESSAGE_REFERENCE_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messages
{
template <class ContainerAllocator>
struct reference_message_
{
  typedef reference_message_<ContainerAllocator> Type;

  reference_message_()
    : eta_d()
    , eta_d_prime()
    , eta_d_prime2()
    , eta_ds()
    , w(0.0)
    , v_s(0.0)
    , v_ss(0.0)  {
    }
  reference_message_(const ContainerAllocator& _alloc)
    : eta_d(_alloc)
    , eta_d_prime(_alloc)
    , eta_d_prime2(_alloc)
    , eta_ds(_alloc)
    , w(0.0)
    , v_s(0.0)
    , v_ss(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _eta_d_type;
  _eta_d_type eta_d;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _eta_d_prime_type;
  _eta_d_prime_type eta_d_prime;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _eta_d_prime2_type;
  _eta_d_prime2_type eta_d_prime2;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _eta_ds_type;
  _eta_ds_type eta_ds;

   typedef double _w_type;
  _w_type w;

   typedef double _v_s_type;
  _v_s_type v_s;

   typedef double _v_ss_type;
  _v_ss_type v_ss;





  typedef boost::shared_ptr< ::messages::reference_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::reference_message_<ContainerAllocator> const> ConstPtr;

}; // struct reference_message_

typedef ::messages::reference_message_<std::allocator<void> > reference_message;

typedef boost::shared_ptr< ::messages::reference_message > reference_messagePtr;
typedef boost::shared_ptr< ::messages::reference_message const> reference_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::reference_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::reference_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages::reference_message_<ContainerAllocator1> & lhs, const ::messages::reference_message_<ContainerAllocator2> & rhs)
{
  return lhs.eta_d == rhs.eta_d &&
    lhs.eta_d_prime == rhs.eta_d_prime &&
    lhs.eta_d_prime2 == rhs.eta_d_prime2 &&
    lhs.eta_ds == rhs.eta_ds &&
    lhs.w == rhs.w &&
    lhs.v_s == rhs.v_s &&
    lhs.v_ss == rhs.v_ss;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages::reference_message_<ContainerAllocator1> & lhs, const ::messages::reference_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::messages::reference_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::reference_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::reference_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::reference_message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::reference_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::reference_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::reference_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32123cd43ccb33fbbded09fe4a9ec786";
  }

  static const char* value(const ::messages::reference_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32123cd43ccb33fbULL;
  static const uint64_t static_value2 = 0xbded09fe4a9ec786ULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::reference_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/reference_message";
  }

  static const char* value(const ::messages::reference_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::reference_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] eta_d\n"
"float64[] eta_d_prime\n"
"float64[] eta_d_prime2\n"
"float64[] eta_ds\n"
"float64 w\n"
"float64 v_s\n"
"float64 v_ss\n"
;
  }

  static const char* value(const ::messages::reference_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::reference_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eta_d);
      stream.next(m.eta_d_prime);
      stream.next(m.eta_d_prime2);
      stream.next(m.eta_ds);
      stream.next(m.w);
      stream.next(m.v_s);
      stream.next(m.v_ss);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct reference_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::reference_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::reference_message_<ContainerAllocator>& v)
  {
    s << indent << "eta_d[]" << std::endl;
    for (size_t i = 0; i < v.eta_d.size(); ++i)
    {
      s << indent << "  eta_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eta_d[i]);
    }
    s << indent << "eta_d_prime[]" << std::endl;
    for (size_t i = 0; i < v.eta_d_prime.size(); ++i)
    {
      s << indent << "  eta_d_prime[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eta_d_prime[i]);
    }
    s << indent << "eta_d_prime2[]" << std::endl;
    for (size_t i = 0; i < v.eta_d_prime2.size(); ++i)
    {
      s << indent << "  eta_d_prime2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eta_d_prime2[i]);
    }
    s << indent << "eta_ds[]" << std::endl;
    for (size_t i = 0; i < v.eta_ds.size(); ++i)
    {
      s << indent << "  eta_ds[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eta_ds[i]);
    }
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "v_s: ";
    Printer<double>::stream(s, indent + "  ", v.v_s);
    s << indent << "v_ss: ";
    Printer<double>::stream(s, indent + "  ", v.v_ss);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_REFERENCE_MESSAGE_H
