// Generated by gencpp from file messages/guidance_signals.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_GUIDANCE_SIGNALS_H
#define MESSAGES_MESSAGE_GUIDANCE_SIGNALS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messages
{
template <class ContainerAllocator>
struct guidance_signals_
{
  typedef guidance_signals_<ContainerAllocator> Type;

  guidance_signals_()
    : eta_d()
    , pd_s1()
    , pd_s2()
    , pd_ss1()
    , pd_ss2()
    , psi_d_dot(0.0)
    , psi_d_ddot(0.0)  {
    }
  guidance_signals_(const ContainerAllocator& _alloc)
    : eta_d(_alloc)
    , pd_s1(_alloc)
    , pd_s2(_alloc)
    , pd_ss1(_alloc)
    , pd_ss2(_alloc)
    , psi_d_dot(0.0)
    , psi_d_ddot(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _eta_d_type;
  _eta_d_type eta_d;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pd_s1_type;
  _pd_s1_type pd_s1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pd_s2_type;
  _pd_s2_type pd_s2;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pd_ss1_type;
  _pd_ss1_type pd_ss1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pd_ss2_type;
  _pd_ss2_type pd_ss2;

   typedef double _psi_d_dot_type;
  _psi_d_dot_type psi_d_dot;

   typedef double _psi_d_ddot_type;
  _psi_d_ddot_type psi_d_ddot;





  typedef boost::shared_ptr< ::messages::guidance_signals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::guidance_signals_<ContainerAllocator> const> ConstPtr;

}; // struct guidance_signals_

typedef ::messages::guidance_signals_<std::allocator<void> > guidance_signals;

typedef boost::shared_ptr< ::messages::guidance_signals > guidance_signalsPtr;
typedef boost::shared_ptr< ::messages::guidance_signals const> guidance_signalsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::guidance_signals_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::guidance_signals_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages::guidance_signals_<ContainerAllocator1> & lhs, const ::messages::guidance_signals_<ContainerAllocator2> & rhs)
{
  return lhs.eta_d == rhs.eta_d &&
    lhs.pd_s1 == rhs.pd_s1 &&
    lhs.pd_s2 == rhs.pd_s2 &&
    lhs.pd_ss1 == rhs.pd_ss1 &&
    lhs.pd_ss2 == rhs.pd_ss2 &&
    lhs.psi_d_dot == rhs.psi_d_dot &&
    lhs.psi_d_ddot == rhs.psi_d_ddot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages::guidance_signals_<ContainerAllocator1> & lhs, const ::messages::guidance_signals_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::messages::guidance_signals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::guidance_signals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::guidance_signals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::guidance_signals_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::guidance_signals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::guidance_signals_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::guidance_signals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd30d3a050e6c9293f8dcca19a9c94ca";
  }

  static const char* value(const ::messages::guidance_signals_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd30d3a050e6c929ULL;
  static const uint64_t static_value2 = 0x3f8dcca19a9c94caULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::guidance_signals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/guidance_signals";
  }

  static const char* value(const ::messages::guidance_signals_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::guidance_signals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] eta_d\n"
"float64[] pd_s1\n"
"float64[] pd_s2\n"
"float64[] pd_ss1\n"
"float64[] pd_ss2\n"
"float64 psi_d_dot\n"
"float64 psi_d_ddot\n"
;
  }

  static const char* value(const ::messages::guidance_signals_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::guidance_signals_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eta_d);
      stream.next(m.pd_s1);
      stream.next(m.pd_s2);
      stream.next(m.pd_ss1);
      stream.next(m.pd_ss2);
      stream.next(m.psi_d_dot);
      stream.next(m.psi_d_ddot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct guidance_signals_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::guidance_signals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::guidance_signals_<ContainerAllocator>& v)
  {
    s << indent << "eta_d[]" << std::endl;
    for (size_t i = 0; i < v.eta_d.size(); ++i)
    {
      s << indent << "  eta_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eta_d[i]);
    }
    s << indent << "pd_s1[]" << std::endl;
    for (size_t i = 0; i < v.pd_s1.size(); ++i)
    {
      s << indent << "  pd_s1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pd_s1[i]);
    }
    s << indent << "pd_s2[]" << std::endl;
    for (size_t i = 0; i < v.pd_s2.size(); ++i)
    {
      s << indent << "  pd_s2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pd_s2[i]);
    }
    s << indent << "pd_ss1[]" << std::endl;
    for (size_t i = 0; i < v.pd_ss1.size(); ++i)
    {
      s << indent << "  pd_ss1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pd_ss1[i]);
    }
    s << indent << "pd_ss2[]" << std::endl;
    for (size_t i = 0; i < v.pd_ss2.size(); ++i)
    {
      s << indent << "  pd_ss2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pd_ss2[i]);
    }
    s << indent << "psi_d_dot: ";
    Printer<double>::stream(s, indent + "  ", v.psi_d_dot);
    s << indent << "psi_d_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.psi_d_ddot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_GUIDANCE_SIGNALS_H
