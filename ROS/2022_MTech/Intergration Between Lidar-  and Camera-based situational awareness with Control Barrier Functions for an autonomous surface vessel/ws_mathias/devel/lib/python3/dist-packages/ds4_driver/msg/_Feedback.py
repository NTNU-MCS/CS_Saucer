# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds4_driver/Feedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Feedback(genpy.Message):
  _md5sum = "e6ff655a0461aca2c8725df811fe5c33"
  _type = "ds4_driver/Feedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Message file for controlling DualShock4
# LED intensities [0.0, 1.0]
bool set_led
float32 led_r
float32 led_g
float32 led_b

# LED flash durations in seconds (max is 2.5 sec)
bool set_led_flash
# Note: Set led_flash_off to 0 to stop flashing
float32 led_flash_on
float32 led_flash_off

# Rumble intensities [0.0, 1.0] (continues rumbling for 5 sec by default)
bool set_rumble
float32 rumble_duration
float32 rumble_small
float32 rumble_big
"""
  __slots__ = ['set_led','led_r','led_g','led_b','set_led_flash','led_flash_on','led_flash_off','set_rumble','rumble_duration','rumble_small','rumble_big']
  _slot_types = ['bool','float32','float32','float32','bool','float32','float32','bool','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       set_led,led_r,led_g,led_b,set_led_flash,led_flash_on,led_flash_off,set_rumble,rumble_duration,rumble_small,rumble_big

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Feedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.set_led is None:
        self.set_led = False
      if self.led_r is None:
        self.led_r = 0.
      if self.led_g is None:
        self.led_g = 0.
      if self.led_b is None:
        self.led_b = 0.
      if self.set_led_flash is None:
        self.set_led_flash = False
      if self.led_flash_on is None:
        self.led_flash_on = 0.
      if self.led_flash_off is None:
        self.led_flash_off = 0.
      if self.set_rumble is None:
        self.set_rumble = False
      if self.rumble_duration is None:
        self.rumble_duration = 0.
      if self.rumble_small is None:
        self.rumble_small = 0.
      if self.rumble_big is None:
        self.rumble_big = 0.
    else:
      self.set_led = False
      self.led_r = 0.
      self.led_g = 0.
      self.led_b = 0.
      self.set_led_flash = False
      self.led_flash_on = 0.
      self.led_flash_off = 0.
      self.set_rumble = False
      self.rumble_duration = 0.
      self.rumble_small = 0.
      self.rumble_big = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3fB2fB3f().pack(_x.set_led, _x.led_r, _x.led_g, _x.led_b, _x.set_led_flash, _x.led_flash_on, _x.led_flash_off, _x.set_rumble, _x.rumble_duration, _x.rumble_small, _x.rumble_big))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.set_led, _x.led_r, _x.led_g, _x.led_b, _x.set_led_flash, _x.led_flash_on, _x.led_flash_off, _x.set_rumble, _x.rumble_duration, _x.rumble_small, _x.rumble_big,) = _get_struct_B3fB2fB3f().unpack(str[start:end])
      self.set_led = bool(self.set_led)
      self.set_led_flash = bool(self.set_led_flash)
      self.set_rumble = bool(self.set_rumble)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3fB2fB3f().pack(_x.set_led, _x.led_r, _x.led_g, _x.led_b, _x.set_led_flash, _x.led_flash_on, _x.led_flash_off, _x.set_rumble, _x.rumble_duration, _x.rumble_small, _x.rumble_big))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.set_led, _x.led_r, _x.led_g, _x.led_b, _x.set_led_flash, _x.led_flash_on, _x.led_flash_off, _x.set_rumble, _x.rumble_duration, _x.rumble_small, _x.rumble_big,) = _get_struct_B3fB2fB3f().unpack(str[start:end])
      self.set_led = bool(self.set_led)
      self.set_led_flash = bool(self.set_led_flash)
      self.set_rumble = bool(self.set_rumble)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3fB2fB3f = None
def _get_struct_B3fB2fB3f():
    global _struct_B3fB2fB3f
    if _struct_B3fB2fB3f is None:
        _struct_B3fB2fB3f = struct.Struct("<B3fB2fB3f")
    return _struct_B3fB2fB3f
