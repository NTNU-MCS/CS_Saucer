# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ds4_driver/Status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ds4_driver.msg
import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class Status(genpy.Message):
  _md5sum = "410582f2082b7ace5412b7159665c723"
  _type = "ds4_driver/Status"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Human-readable and more ROS-compatible status of the device
Header header

# Stick
# Left: 1.0, Right: -1.0
float32 axis_left_x
# Up: 1.0, Down: -1.0
float32 axis_left_y
float32 axis_right_x
float32 axis_right_y

# Shoulder buttons [0, 1.0]
float32 axis_l2
float32 axis_r2

# Buttons (0: Not pressed, 1: Pressed)
int32 button_dpad_up
int32 button_dpad_down
int32 button_dpad_left
int32 button_dpad_right
int32 button_cross
int32 button_circle
int32 button_square
int32 button_triangle
int32 button_l1
int32 button_l2
int32 button_l3
int32 button_r1
int32 button_r2
int32 button_r3
int32 button_share
int32 button_options
int32 button_trackpad
int32 button_ps

# Gyro
sensor_msgs/Imu imu

# Battery
float32 battery_percentage  # [0.0, 1.0]
int32 battery_full_charging # 0: No, 1: Yes

# Trackpads
ds4_driver/Trackpad touch0
ds4_driver/Trackpad touch1

# Plugs
int32 plug_usb              # 0: No, 1: Yes
int32 plug_audio            # 0: No, 1: Yes
int32 plug_mic              # 0: No, 1: Yes

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: ds4_driver/Trackpad
# Trackpad message for DualShock 4
uint16 id       # Touch ID (increments every touch)
int32 active    # 0: inactive, 1: active
float32 x       # 0.0: left edge, 1.0: right edge
float32 y       # 0.0: left edge, 1.0: right edge
"""
  __slots__ = ['header','axis_left_x','axis_left_y','axis_right_x','axis_right_y','axis_l2','axis_r2','button_dpad_up','button_dpad_down','button_dpad_left','button_dpad_right','button_cross','button_circle','button_square','button_triangle','button_l1','button_l2','button_l3','button_r1','button_r2','button_r3','button_share','button_options','button_trackpad','button_ps','imu','battery_percentage','battery_full_charging','touch0','touch1','plug_usb','plug_audio','plug_mic']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','sensor_msgs/Imu','float32','int32','ds4_driver/Trackpad','ds4_driver/Trackpad','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,axis_left_x,axis_left_y,axis_right_x,axis_right_y,axis_l2,axis_r2,button_dpad_up,button_dpad_down,button_dpad_left,button_dpad_right,button_cross,button_circle,button_square,button_triangle,button_l1,button_l2,button_l3,button_r1,button_r2,button_r3,button_share,button_options,button_trackpad,button_ps,imu,battery_percentage,battery_full_charging,touch0,touch1,plug_usb,plug_audio,plug_mic

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.axis_left_x is None:
        self.axis_left_x = 0.
      if self.axis_left_y is None:
        self.axis_left_y = 0.
      if self.axis_right_x is None:
        self.axis_right_x = 0.
      if self.axis_right_y is None:
        self.axis_right_y = 0.
      if self.axis_l2 is None:
        self.axis_l2 = 0.
      if self.axis_r2 is None:
        self.axis_r2 = 0.
      if self.button_dpad_up is None:
        self.button_dpad_up = 0
      if self.button_dpad_down is None:
        self.button_dpad_down = 0
      if self.button_dpad_left is None:
        self.button_dpad_left = 0
      if self.button_dpad_right is None:
        self.button_dpad_right = 0
      if self.button_cross is None:
        self.button_cross = 0
      if self.button_circle is None:
        self.button_circle = 0
      if self.button_square is None:
        self.button_square = 0
      if self.button_triangle is None:
        self.button_triangle = 0
      if self.button_l1 is None:
        self.button_l1 = 0
      if self.button_l2 is None:
        self.button_l2 = 0
      if self.button_l3 is None:
        self.button_l3 = 0
      if self.button_r1 is None:
        self.button_r1 = 0
      if self.button_r2 is None:
        self.button_r2 = 0
      if self.button_r3 is None:
        self.button_r3 = 0
      if self.button_share is None:
        self.button_share = 0
      if self.button_options is None:
        self.button_options = 0
      if self.button_trackpad is None:
        self.button_trackpad = 0
      if self.button_ps is None:
        self.button_ps = 0
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.battery_percentage is None:
        self.battery_percentage = 0.
      if self.battery_full_charging is None:
        self.battery_full_charging = 0
      if self.touch0 is None:
        self.touch0 = ds4_driver.msg.Trackpad()
      if self.touch1 is None:
        self.touch1 = ds4_driver.msg.Trackpad()
      if self.plug_usb is None:
        self.plug_usb = 0
      if self.plug_audio is None:
        self.plug_audio = 0
      if self.plug_mic is None:
        self.plug_mic = 0
    else:
      self.header = std_msgs.msg.Header()
      self.axis_left_x = 0.
      self.axis_left_y = 0.
      self.axis_right_x = 0.
      self.axis_right_y = 0.
      self.axis_l2 = 0.
      self.axis_r2 = 0.
      self.button_dpad_up = 0
      self.button_dpad_down = 0
      self.button_dpad_left = 0
      self.button_dpad_right = 0
      self.button_cross = 0
      self.button_circle = 0
      self.button_square = 0
      self.button_triangle = 0
      self.button_l1 = 0
      self.button_l2 = 0
      self.button_l3 = 0
      self.button_r1 = 0
      self.button_r2 = 0
      self.button_r3 = 0
      self.button_share = 0
      self.button_options = 0
      self.button_trackpad = 0
      self.button_ps = 0
      self.imu = sensor_msgs.msg.Imu()
      self.battery_percentage = 0.
      self.battery_full_charging = 0
      self.touch0 = ds4_driver.msg.Trackpad()
      self.touch1 = ds4_driver.msg.Trackpad()
      self.plug_usb = 0
      self.plug_audio = 0
      self.plug_mic = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f18i3I().pack(_x.axis_left_x, _x.axis_left_y, _x.axis_right_x, _x.axis_right_y, _x.axis_l2, _x.axis_r2, _x.button_dpad_up, _x.button_dpad_down, _x.button_dpad_left, _x.button_dpad_right, _x.button_cross, _x.button_circle, _x.button_square, _x.button_triangle, _x.button_l1, _x.button_l2, _x.button_l3, _x.button_r1, _x.button_r2, _x.button_r3, _x.button_share, _x.button_options, _x.button_trackpad, _x.button_ps, _x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w))
      buff.write(_get_struct_9d().pack(*self.imu.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.imu.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.imu.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_fiHi2fHi2f3i().pack(_x.battery_percentage, _x.battery_full_charging, _x.touch0.id, _x.touch0.active, _x.touch0.x, _x.touch0.y, _x.touch1.id, _x.touch1.active, _x.touch1.x, _x.touch1.y, _x.plug_usb, _x.plug_audio, _x.plug_mic))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.touch0 is None:
        self.touch0 = ds4_driver.msg.Trackpad()
      if self.touch1 is None:
        self.touch1 = ds4_driver.msg.Trackpad()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.axis_left_x, _x.axis_left_y, _x.axis_right_x, _x.axis_right_y, _x.axis_l2, _x.axis_r2, _x.button_dpad_up, _x.button_dpad_down, _x.button_dpad_left, _x.button_dpad_right, _x.button_cross, _x.button_circle, _x.button_square, _x.button_triangle, _x.button_l1, _x.button_l2, _x.button_l3, _x.button_r1, _x.button_r2, _x.button_r3, _x.button_share, _x.button_options, _x.button_trackpad, _x.button_ps, _x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_6f18i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.battery_percentage, _x.battery_full_charging, _x.touch0.id, _x.touch0.active, _x.touch0.x, _x.touch0.y, _x.touch1.id, _x.touch1.active, _x.touch1.x, _x.touch1.y, _x.plug_usb, _x.plug_audio, _x.plug_mic,) = _get_struct_fiHi2fHi2f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f18i3I().pack(_x.axis_left_x, _x.axis_left_y, _x.axis_right_x, _x.axis_right_y, _x.axis_l2, _x.axis_r2, _x.button_dpad_up, _x.button_dpad_down, _x.button_dpad_left, _x.button_dpad_right, _x.button_cross, _x.button_circle, _x.button_square, _x.button_triangle, _x.button_l1, _x.button_l2, _x.button_l3, _x.button_r1, _x.button_r2, _x.button_r3, _x.button_share, _x.button_options, _x.button_trackpad, _x.button_ps, _x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w))
      buff.write(self.imu.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z))
      buff.write(self.imu.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z))
      buff.write(self.imu.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_fiHi2fHi2f3i().pack(_x.battery_percentage, _x.battery_full_charging, _x.touch0.id, _x.touch0.active, _x.touch0.x, _x.touch0.y, _x.touch1.id, _x.touch1.active, _x.touch1.x, _x.touch1.y, _x.plug_usb, _x.plug_audio, _x.plug_mic))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.touch0 is None:
        self.touch0 = ds4_driver.msg.Trackpad()
      if self.touch1 is None:
        self.touch1 = ds4_driver.msg.Trackpad()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.axis_left_x, _x.axis_left_y, _x.axis_right_x, _x.axis_right_y, _x.axis_l2, _x.axis_r2, _x.button_dpad_up, _x.button_dpad_down, _x.button_dpad_left, _x.button_dpad_right, _x.button_cross, _x.button_circle, _x.button_square, _x.button_triangle, _x.button_l1, _x.button_l2, _x.button_l3, _x.button_r1, _x.button_r2, _x.button_r3, _x.button_share, _x.button_options, _x.button_trackpad, _x.button_ps, _x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_6f18i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 48
      (_x.battery_percentage, _x.battery_full_charging, _x.touch0.id, _x.touch0.active, _x.touch0.x, _x.touch0.y, _x.touch1.id, _x.touch1.active, _x.touch1.x, _x.touch1.y, _x.plug_usb, _x.plug_audio, _x.plug_mic,) = _get_struct_fiHi2fHi2f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6f18i3I = None
def _get_struct_6f18i3I():
    global _struct_6f18i3I
    if _struct_6f18i3I is None:
        _struct_6f18i3I = struct.Struct("<6f18i3I")
    return _struct_6f18i3I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_fiHi2fHi2f3i = None
def _get_struct_fiHi2fHi2f3i():
    global _struct_fiHi2fHi2f3i
    if _struct_fiHi2fHi2f3i is None:
        _struct_fiHi2fHi2f3i = struct.Struct("<fiHi2fHi2f3i")
    return _struct_fiHi2fHi2f3i
