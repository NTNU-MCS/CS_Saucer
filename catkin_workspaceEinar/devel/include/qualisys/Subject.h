// Generated by gencpp from file qualisys/Subject.msg
// DO NOT EDIT!


#ifndef QUALISYS_MESSAGE_SUBJECT_H
#define QUALISYS_MESSAGE_SUBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>
#include <qualisys/Marker.h>

namespace qualisys
{
template <class ContainerAllocator>
struct Subject_
{
  typedef Subject_<ContainerAllocator> Type;

  Subject_()
    : header()
    , name()
    , occluded(false)
    , position()
    , orientation()
    , markers()  {
    }
  Subject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , occluded(false)
    , position(_alloc)
    , orientation(_alloc)
    , markers(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _occluded_type;
  _occluded_type occluded;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef std::vector< ::qualisys::Marker_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::qualisys::Marker_<ContainerAllocator> >::other >  _markers_type;
  _markers_type markers;




  typedef boost::shared_ptr< ::qualisys::Subject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qualisys::Subject_<ContainerAllocator> const> ConstPtr;

}; // struct Subject_

typedef ::qualisys::Subject_<std::allocator<void> > Subject;

typedef boost::shared_ptr< ::qualisys::Subject > SubjectPtr;
typedef boost::shared_ptr< ::qualisys::Subject const> SubjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qualisys::Subject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qualisys::Subject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qualisys

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'qualisys': ['/home/einar/catkin_ws/src/qualisys/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qualisys::Subject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qualisys::Subject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qualisys::Subject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qualisys::Subject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qualisys::Subject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qualisys::Subject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qualisys::Subject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "678d5c79c0845b2430769c75a38d4e56";
  }

  static const char* value(const ::qualisys::Subject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x678d5c79c0845b24ULL;
  static const uint64_t static_value2 = 0x30769c75a38d4e56ULL;
};

template<class ContainerAllocator>
struct DataType< ::qualisys::Subject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qualisys/Subject";
  }

  static const char* value(const ::qualisys::Subject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qualisys::Subject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string name\n\
bool occluded\n\
geometry_msgs/Point position\n\
geometry_msgs/Quaternion orientation\n\
qualisys/Marker[] markers\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: qualisys/Marker\n\
string name\n\
string subject_name\n\
geometry_msgs/Point position\n\
bool occluded\n\
";
  }

  static const char* value(const ::qualisys::Subject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qualisys::Subject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.occluded);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.markers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Subject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qualisys::Subject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qualisys::Subject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "occluded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.occluded);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "markers[]" << std::endl;
    for (size_t i = 0; i < v.markers.size(); ++i)
    {
      s << indent << "  markers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::qualisys::Marker_<ContainerAllocator> >::stream(s, indent + "    ", v.markers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUALISYS_MESSAGE_SUBJECT_H
